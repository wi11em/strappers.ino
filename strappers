#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <WiFiClient.h>
#include <SPI.h>
#include <MFRC522.h>
#include <ArduinoJson.h>  // Ensure this line is included

ESP8266WiFiMulti WiFiMulti;
MFRC522 mfrc522(15, 0); // Change SS_PIN and RST_PIN to your setup

bool cardPresented = false; // Flag to track if the card has been presented

const int buzzerPin = 2; // Pin number for the buzzer

void setup()
{
  Serial.begin(115200);
  Serial.setDebugOutput(true);

  Serial.println();
  Serial.println();
  Serial.println();

  for (uint8_t t = 4; t > 0; t--)
  {
    Serial.printf("[SETUP] WAIT %d...\n", t);
    Serial.flush();
    delay(1000);
  }

  WiFi.mode(WIFI_STA);
  WiFiMulti.addAP("WIFI", "Password"); // Replace with your WiFi credentials
  SPI.begin();                       // Initialize SPI bus
  mfrc522.PCD_Init();                 // Initialize MFRC522 RFID module

  pinMode(buzzerPin, OUTPUT); // Set the buzzer pin as output
}

void loop()
{
  if ((WiFiMulti.run() == WL_CONNECTED))
  {
    if (!cardPresented)
    {
      Serial.println("Ready to read RFID card. Please present the card.");
      cardPresented = true;
    }

    if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial())
    {
      String uid = "";
      for (byte i = 0; i < mfrc522.uid.size; i++)
      {
        uid += String(mfrc522.uid.uidByte[i] < 0x10 ? "0" : "");
        uid += String(mfrc522.uid.uidByte[i], HEX);
      }

      // Print the UID to ensure it's correct
      Serial.print("UID: ");
      Serial.println(uid);

      mfrc522.PICC_HaltA();
      WiFiClient client;

      String url = "https://www.t.strapbadge.be/api_badge/uid=" + uid;

      // Debugging: print the URL to ensure it's correctly formed
      Serial.print("Request URL: ");
      Serial.println(url);

      if (client.connect("www.t.strapbadge.be", 80))
      {
        // Manually construct HTTP GET request
        client.print(String("GET ") + "/api_badge/uid=" + uid + " HTTP/1.1\r\n" +
                     "Host: www.t.strapbadge.be\r\n" +
                     "Connection: close\r\n" +
                     "Accept: application/json\r\n" +
                     "User-Agent: ESP8266\r\n" +
                     "\r\n");

        Serial.println("[HTTP] Request sent");

        while (client.connected())
        {
          String line = client.readStringUntil('\n');
          if (line == "\r") {
            Serial.println("[HTTP] Headers received");
            break;
          }
        }

        // Read response
        String response = client.readString();
        Serial.println("Response:");
        Serial.println(response);

        client.stop();

        // Parse JSON response
        StaticJsonDocument<512> jsonDocument;
        DeserializationError error = deserializeJson(jsonDocument, response);

        if (error)
        {
          Serial.printf("JSON parsing failed: %s\n", error.c_str());
        }
        else
        {
          const char* received_message = jsonDocument["received_message"];
          int success_code = jsonDocument["succes_code"];
          const char* school_name = jsonDocument["school_name"];
          const char* class_name = jsonDocument["class_name"];
          int qty_class_day = jsonDocument["qty_class_day"];
          int qty_school_day = jsonDocument["qty_school_day"];
          int qty_class_week = jsonDocument["qty_class_week"];
          int qty_school_week = jsonDocument["qty_school_week"];

          Serial.println("Parsed data:");
          Serial.printf("Received Message: %s\n", received_message);
          Serial.printf("Success Code: %d\n", success_code);
          Serial.printf("School Name: %s\n", school_name);
          Serial.printf("Class Name: %s\n", class_name);
          Serial.printf("Qty Class Day: %d\n", qty_class_day);
          Serial.printf("Qty School Day: %d\n", qty_school_day);
          Serial.printf("Qty Class Week: %d\n", qty_class_week);
          Serial.printf("Qty School Week: %d\n", qty_school_week);
        }

        // Turn on the buzzer if the response is received
        digitalWrite(buzzerPin, HIGH);
        delay(250);
        digitalWrite(buzzerPin, LOW);

        // Reset the flag to allow prompt for next card presentation
        cardPresented = false;
      }
      else
      {
        Serial.println("[HTTP] Connection failed");
      }
    }
  }

  delay(1000);
}
