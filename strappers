#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include <SPI.h>
#include <MFRC522.h>
#include <ArduinoJson.h>

ESP8266WiFiMulti WiFiMulti;
MFRC522 mfrc522(15, 0); // Change SS_PIN and RST_PIN to your setup

bool cardPresented = false; // Flag to track if the card has been presented

const int buzzerPin = 2; // Pin number for the buzzer

void setup()
{
  Serial.begin(115200);
  Serial.setDebugOutput(true);

  Serial.println();
  Serial.println();
  Serial.println();

  for (uint8_t t = 4; t > 0; t--)
  {
    Serial.printf("[SETUP] WAIT %d...\n", t);
    Serial.flush();
    delay(1000);
  }

  WiFi.mode(WIFI_STA);

WiFiMulti.addAP("replace with SSID", "replace with password"); // Replace with your WiFi credentials

  SPI.begin();                       // Initialize SPI bus
  mfrc522.PCD_Init();                 // Initialize MFRC522 RFID module

  pinMode(buzzerPin, OUTPUT); // Set the buzzer pin as output
}

void loop()
{
  if ((WiFiMulti.run() == WL_CONNECTED))
  {
    if (!cardPresented)
    {
      Serial.println("Ready to read RFID card. Please present the card.");
      cardPresented = true;
    }

    if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial())
    {
      String uid = "";
      for (byte i = 0; i < mfrc522.uid.size; i++)
      {
        uid += String(mfrc522.uid.uidByte[i] < 0x10 ? "0" : "");
        uid += String(mfrc522.uid.uidByte[i], HEX);
      }

      mfrc522.PICC_HaltA();
      WiFiClient client;
      HTTPClient http;

      String url = "http://www.strapbadge.stijnally.net/api_badge/uid=" + uid;

      Serial.print("[HTTP] Begin...\n");
      if (http.begin(client, url))
      {
        int httpCode = http.GET();

        if (httpCode > 0)
        {
          Serial.printf("[HTTP] GET code: %d\n", httpCode);

          if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_MOVED_PERMANENTLY)
          {
            String payload = http.getString();

            DynamicJsonDocument jsonDocument(1024);
            DeserializationError error = deserializeJson(jsonDocument, payload);

            digitalWrite(buzzerPin, HIGH); // Turn on the buzzer
            delay(250);
            digitalWrite(buzzerPin, LOW); // Turn off the buzzer

            if (error)
            {
              Serial.printf("[JSON] Parsing failed! Error code: %s\n", error.c_str());
            }
            else
            {
              const char *name = jsonDocument["name"];
              const char *email = jsonDocument["email"];
              int age = jsonDocument["age"];

              Serial.println("Received data:");
              Serial.print("Name: ");
              Serial.println(name);
              Serial.print("Email: ");
              Serial.println(email);
              Serial.print("Age: ");
              Serial.println(age);
            }
          }
        }
        else
        {
          Serial.printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str());
        }

        http.end();
      }
      else
      {
        Serial.println("[HTTP] Unable to connect");
      }

      // Reset the flag to allow prompt for next card presentation
      cardPresented = false;
    }
  }
        
  delay(1000);
}
